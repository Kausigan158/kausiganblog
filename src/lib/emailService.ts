// Email service configuration and utilities
// This handles sending subscription notifications to kausigansrinivasan@gmail.com

export interface SubscriptionData {
  email: string;
  timestamp: string;
  userAgent?: string;
  ipAddress?: string;
}

export interface EmailConfig {
  adminEmail: string;
  smtpHost?: string;
  smtpPort?: number;
  smtpUser?: string;
  smtpPassword?: string;
}

// Default configuration - emails will be sent to kausigansrinivasan@gmail.com
const defaultConfig: EmailConfig = {
  adminEmail: 'kausigansrinivasan@gmail.com',
  // Add your SMTP configuration here if you want to actually send emails
  // smtpHost: 'smtp.gmail.com',
  // smtpPort: 587,
  // smtpUser: 'your-email@gmail.com',
  // smtpPassword: 'your-app-password'
};

class EmailService {
  private config: EmailConfig;

  constructor(config: EmailConfig = defaultConfig) {
    this.config = config;
  }

  async sendSubscriptionNotification(data: SubscriptionData): Promise<boolean> {
    try {
      // In a real implementation, you would send an actual email here
      // For now, we'll log the details and simulate the process
      
      const notificationData = {
        to: this.config.adminEmail,
        subject: 'New Newsletter Subscription - Kausigan Srinivasan Blog',
        body: this.generateNotificationEmailBody(data),
        subscriberEmail: data.email,
        timestamp: data.timestamp
      };

      console.log('üìß Email notification prepared:', notificationData);
      
      // If you want to actually send emails, uncomment and configure the code below:
      /*
      if (this.config.smtpHost && this.config.smtpUser && this.config.smtpPassword) {
        await this.sendEmail(notificationData);
        console.log('‚úÖ Email sent successfully');
      } else {
        console.log('‚ö†Ô∏è Email service not configured - notification logged only');
      }
      */

      // For development/testing, we'll just log the notification
      console.log('‚úÖ Subscription notification processed');
      return true;

    } catch (error) {
      console.error('‚ùå Failed to send subscription notification:', error);
      return false;
    }
  }

  private generateNotificationEmailBody(data: SubscriptionData): string {
    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>New Newsletter Subscription</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #e50914; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; background: #f9f9f9; }
        .footer { padding: 20px; text-align: center; color: #666; font-size: 12px; }
        .highlight { background: #fff3cd; padding: 10px; border-left: 4px solid #e50914; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìß New Newsletter Subscription</h1>
            <p>Kausigan Srinivasan's Blog</p>
        </div>
        
        <div class="content">
            <h2>New Subscriber Details</h2>
            <div class="highlight">
                <p><strong>Email:</strong> ${data.email}</p>
                <p><strong>Date:</strong> ${new Date(data.timestamp).toLocaleString()}</p>
                <p><strong>Time Zone:</strong> ${Intl.DateTimeFormat().resolvedOptions().timeZone}</p>
            </div>
            
            <h3>Technical Details</h3>
            <ul>
                <li><strong>User Agent:</strong> ${data.userAgent || 'Not available'}</li>
                <li><strong>IP Address:</strong> ${data.ipAddress || 'Not available'}</li>
                <li><strong>Timestamp:</strong> ${data.timestamp}</li>
            </ul>
            
            <h3>Next Steps</h3>
            <p>Please add this email address to your mailing list:</p>
            <ul>
                <li>Copy the email: <code>${data.email}</code></li>
                <li>Add to your email marketing platform (Mailchimp, ConvertKit, etc.)</li>
                <li>Send a welcome email to the new subscriber</li>
            </ul>
        </div>
        
        <div class="footer">
            <p>This notification was automatically generated by your blog's subscription system.</p>
            <p>¬© ${new Date().getFullYear()} Kausigan Srinivasan's Blog</p>
        </div>
    </div>
</body>
</html>
    `.trim();
  }

  // Method to actually send emails (requires SMTP configuration)
  private async sendEmail(emailData: any): Promise<void> {
    // This would integrate with your preferred email service
    // Examples: Nodemailer, SendGrid, Mailgun, AWS SES, etc.
    
    throw new Error('Email service not configured. Please set up SMTP credentials in emailService.ts');
  }

  // Method to get subscriber statistics
  getSubscriptionStats(): { totalSubscribers: number; lastSubscription?: string } {
    // In a real implementation, this would query your database
    return {
      totalSubscribers: 0, // Would come from database
      lastSubscription: undefined // Would come from database
    };
  }
}

// Export singleton instance
export const emailService = new EmailService();

// Export utility functions
export const sendSubscriptionNotification = (data: SubscriptionData) => 
  emailService.sendSubscriptionNotification(data);

export const getEmailConfig = () => defaultConfig;
